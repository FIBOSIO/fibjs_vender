#!/bin/bash

usage()
{
	echo ""
	echo "Usage: `basename $0` [release | debug | i386 | amd64 | arm | arm64 | clean] [-h]"
	echo "Options:"
	echo "  release, debug: "
	echo "      Specifies the build type."
	echo "  i386, amd64, arm, arm64:"
	echo "      Specifies the architecture for code generation."
	echo "  clean: "
	echo "      Clean the build folder."
	echo "  -h, --help:"
	echo "      Print this message and exit."
	echo ""
	exit 0
}

VENDER_PATH=`pwd`
OUT_PATH=${VENDER_PATH}/../out

HOST_OS=`uname`
HOST_ARCH=`uname -m`

case ${HOST_ARCH} in
	x86_64) HOST_ARCH="amd64"
		;;
	armv6|armv7|armv7s|armv7l) HOST_ARCH="arm"
		;;
	aarch64) HOST_ARCH="arm64"
		;;
esac

TARGET_OS=$HOST_OS
TARGET_ARCH=$HOST_ARCH
BUILD_TYPE="release"
BUILD_PREFIX=""
BUILD_OPTION=""

for i in "$@"
do
	case $i in
		i386|amd64|arm|arm64) TARGET_ARCH=$i
			;;
		release|debug|clean) BUILD_TYPE=$i
			;;
  --help|-h) usage
			;;
		  *) echo "illegal option $i"
			usage
			;;
	esac
done

if [ $TARGET_ARCH != $HOST_ARCH ] || [ $TARGET_OS != $HOST_OS ]; then
	case $TARGET_ARCH in
		i386)
			if [ $HOST_ARCH = "amd64" ]; then
				BUILD_OPTION="-m32"
			else
				usage
			fi
			;;
		amd64)
			if [ $TARGET_OS = "Linux" ]; then
				BUILD_PREFIX="x86_64-linux-gnu-"
			else
				usage
			fi
			;;
		arm)
			if [ $TARGET_OS = "Linux" ]; then
				BUILD_PREFIX="arm-linux-gnueabi-"
			else
				usage
			fi
			;;
		arm64)
			if [ $TARGET_OS = "Linux" ]; then
				BUILD_PREFIX="aarch64-linux-gnu-"
			else
				usage
			fi
			;;
	esac
fi

if [ "$BUILD_PREFIX" != "" ]; then
	export CC=${BUILD_PREFIX}gcc
	export CXX=${BUILD_PREFIX}g++
fi

if [ ${BUILD_TYPE} = 'clean' ]; then
	if [ -e "${OUT_PATH}" ]; then
		rm -rf "${OUT_PATH}/${TARGET_OS}_*"
	fi

	exit 0
fi

if [ ! -e "${OUT_PATH}" ]; then
	mkdir "${OUT_PATH}"
fi

if [ ! -e "${OUT_PATH}/${TARGET_OS}_${TARGET_ARCH}_${BUILD_TYPE}" ]; then
	mkdir "${OUT_PATH}/${TARGET_OS}_${TARGET_ARCH}_${BUILD_TYPE}"
fi

OUT_PATH="${OUT_PATH}/${TARGET_OS}_${TARGET_ARCH}_${BUILD_TYPE}"
cd ${OUT_PATH}

libs="exlib
gtest
expat
gumbo
gd
tiff
jpeg
png
webp
zlib
leveldb
snappy
ev
pcre
sqlite
mongo
umysql
uuid
exif
winiconv
mbedtls
v8
SpiderMonkey
unzip
editline"

for lib in ${libs}
do

	if [ ! -e ${lib} ]; then
		mkdir ${lib}
	fi

	cd ${lib}

	cmake -DBUILD_TYPE=${BUILD_TYPE} -DBUILD_OPTION=${BUILD_OPTION} -Dname=${lib} ${VENDER_PATH}/${lib} > CMake.log
	if [ $? != 0 ]; then
		exit 1
	fi

	if [ ! "$BUILD_JOBS" = "" ]; then
		sh -c "${BUILD_VERBOSE} make -j${BUILD_JOBS}"
	else
		sh -c "${BUILD_VERBOSE} make"
	fi
	if [ $? != 0 ]; then
		exit 1
	fi

	cd ..
done

for lib in ${libs}
do

	if [ -e ${VENDER_PATH}/${lib}/test ]; then

		if [ ! -e ${lib}_test ]; then
			mkdir ${lib}_test
		fi

		cd ${lib}_test

		cmake -DBUILD_TYPE=${BUILD_TYPE} -DBUILD_OPTION=${BUILD_OPTION} -Dname=${lib} ${VENDER_PATH}/${lib}/test > CMake.log
		if [ $? != 0 ]; then
			exit 1
		fi

		if [ ! "$BUILD_JOBS" = "" ]; then
			sh -c "${BUILD_VERBOSE} make -j${BUILD_JOBS}"
		else
			sh -c "${BUILD_VERBOSE} make"
		fi
		if [ $? != 0 ]; then
			exit 1
		fi

		cd ..

	fi

done

cd ${VENDER_PATH}
